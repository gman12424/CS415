/************************************************************************\
* 			  INET_RSTREAM.C       			         *
* Test of TCP/IP. Set up a socket for establishing a connection at       *
* some free port on the local host. After accepting a connection, speak  *
* briefly to peer, and then read char at a time from the stream. Write   *
* to stdout. At EOF, shut down.                                          *
* 								         *
* Phil Kearns							         *
* April 11, 1987						         *
* 								         *
* Modified February 2009 to use getaddrinfo()                            *
\************************************************************************/

int debugT = 1;

#include "messages.h"



/*void printsin(struct sockaddr_in*, char*, char*);
char readMessage(int, char*);
int writeMessage(int, char, char*);*/
int main()
{
  int lengthMessage = 20;
  int listener;  /* fd for socket on which we get connection requests */
  int connX = 0;      /* fd for socket thru which we pass data for X */
  int connY = 1; /*fd for socket thru which we pass data for X*/
  int que[6]; /*que for waiting players*/
  char* names[6];
  char name1[lengthMessage];
  char name2[lengthMessage];
  char name3[lengthMessage];
  char name4[lengthMessage];
  char name5[lengthMessage];
  char name6[lengthMessage];
  names[0] = name1;
  names[1] = name2;
  names[2] = name3;
  names[3] = name4;
  names[4] = name5;
  names[5] = name6;
  int i,j;
 // int turn = 0;
 // int game = 0;
  for( i = 0; i < 6; i++){
    que[i] = 0;
  }
  int players = 0;
  struct sockaddr_in *localaddr, peer;
  int ecode;
  socklen_t length;
  struct addrinfo hints, *addrlist;
  char name[HOST_NAME_MAX];
  FILE *hostFile;
  fd_set mask, wMask;
  int hits;
  struct timeval timeout;
  char msg[lengthMessage];
  char msgType;
/* 
   Want to specify local server address of:
      addressing family: AF_INET
      ip address:        any interface on this system 
      port:              0 => system will pick free port
*/

  memset(&hints, 0, sizeof(hints));
  hints.ai_family = AF_INET; hints.ai_socktype = SOCK_STREAM;
  hints.ai_flags = AI_NUMERICSERV | AI_PASSIVE; hints.ai_protocol = 0;
  hints.ai_canonname = NULL; hints.ai_addr = NULL;
  hints.ai_next = NULL;

  ecode = getaddrinfo(NULL, "0", &hints, &addrlist);
  if (ecode != 0) {
    fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(ecode));
    exit(1);
  }

  localaddr = (struct sockaddr_in *) addrlist->ai_addr;
 // printsin(s_in, "TTT", "Local socket is:"); fflush(stdout);  


/*
   Create socket on which we will accept connections. This is NOT the
   same as the socket on which we pass data.
*/
  if ( (listener = socket( addrlist->ai_family, addrlist->ai_socktype, 0 
)) < 0 ) {
    fprintf(stderr, "inet_rstream:socket\n");
    exit(1);
  }


  if (bind(listener, (struct sockaddr *)localaddr, sizeof(struct 
sockaddr_in)) < 0) {
    fprintf(stderr, "inet_rstream:bind");
    exit(1);
  }

/*
   Print out the port number assigned to this process by bind().
*/
  length = sizeof(struct sockaddr_in);
  if (getsockname(listener, (struct sockaddr *)localaddr, &length) < 0) {
    fprintf(stderr, "inet_rstream:getsockname");
    exit(1);
  }
  gethostname(name, HOST_NAME_MAX);
  printf("TTT:: host: %s\n      assigned port number %d\n", name, 
    ntohs(localaddr->sin_port));
  hostFile = fopen(".//TTThost.txt", "w");
  if(hostFile == NULL){
    fprintf(stderr, "hostFile failed to open\n");
  }
  fprintf(hostFile,"%s %d\n", name, ntohs(localaddr->sin_port));
  if(fclose(hostFile)!=0){
   fprintf(stderr, "hostFile failed to close\n");
  }

  listen(listener, 1);
  int run = 1;
  while(run){
    
    /*
       Hanging a select on the file descriptors looking to see if any 
       descriptor is able to be read. 
       Upon connection, data will be
       passed through the socket on descriptor conn.
    */
    length = sizeof(peer);
    int highSock = listener;
    FD_ZERO(&mask);
    FD_ZERO(&wMask);
    FD_SET(listener, &mask);
    FD_SET(0, &mask);
    for(i = 0; i < 6; i++){
      if(que[i] != 0){
        FD_SET(que[i], &mask);
        FD_SET(que[i], &wMask);
        if(debugT){
          fprintf(stderr, "set: %d\n", que[i]);
        }
        if(que[i] > highSock){
          highSock = que[i];
        }
      }
    }
    if(debugT){
      fprintf(stderr, "highsock: %d\n", highSock);
    }
    timeout.tv_sec = 60;
    timeout.tv_usec = 0;
    if((hits = select(highSock +1, &mask, (fd_set *)0, (fd_set *)0, 
                 &timeout))  <0){
      fprintf(stderr, "TTTError:select\n");
      exit(1);
    }
    if(hits == 0){
      //show still alive
      fprintf(stderr, ".");
      //fflush(stdout);
    }
    if(FD_ISSET(listener, &mask)){
      i = 0;
      int true = 1;
      while (i < 6&& i!=0){
        i++;
      }
      if(i == 6){
      }else{
        if((que[i] = accept(listener, (struct sockaddr *)&peer, 
               &length)) < 0){
          fprintf(stderr, "accept error\n");
          exit(1);
        }
        printsin(&peer, "TTT::", "Accepted connectionf rom");
        writeMessage(que[i], 'w', msg);
        players++;
        memset(msg, '\0', lengthMessage*sizeof(char));
      }
      /*if((que[players] = accept(listener, (struct sockaddr *)&peer, 
                         &length)) < 0){
        fprintf(stderr, "accept error\n");
        exit(1);
      }
      printsin(&peer, "TTT::", "Accepted connection from");
      writeMessage(que[players], 'w' ,msg);
      players++;
      memset(msg, '\0', lengthMessage*sizeof(char));
    }
    //if(FD_ISSET(0, &mask)){
    //  fprintf(stdout, "Killing Process\n");
    //  run = 0;
    //

    if(FD_ISSET(que[connX], &mask)){
      msgType = readMessage(que[connX], msg);
      if(debugT){
        fprintf(stderr, "connX activated, msg: ");
      }
      if(msgType == 'E'){
        close(que[connX]);
        que[connX] = 0;
        players--;
      }
      if(msgType == 'h'){
        fprintf(stdout, "h");
        //run = 0;
      }
      for(i = 0; i < lengthMessage; i++){
        putc(msg[i],stdout);
      }
      putc('\n', stdout);
      //run = 0;
      strcpy(names[connX], msg);
      memset(msg, '\0', lengthMessage*sizeof(char));
    }

    if(FD_ISSET(que[connY], &mask)){
      msgType = readMessage(que[connY], msg);
      if(debugT){
        fprintf(stderr, "connY activated, msg: ");
      }
      if(msgType == 'E'){
        close(que[connY]);
        que[connY] = 0;
        players--;
      }
      if(msgType == 'h'){
        fprintf(stdout, "h");
        //run = 0;
      }
      for(i = 0; i < lengthMessage; i++){
        putc(msg[i],stdout);
      }
      putc('\n', stdout);
      strcpy(names[connY], msg);
      //run = 0;
      memset(msg, '\0', lengthMessage*sizeof(char));
    }
    for(i = 2; i < 6; i++){
      if(que[i] != 0){
        if(FD_ISSET(que[i], &mask)){
          msgType = readMessage(que[i], msg);
          if(debugT){
            fprintf(stderr, "conn%d activated, msg: ", i);
          }
          if(msgType == 'h'){
            if(debugT){
              fprintf(stderr, "h");
              for(j = 0; j < lengthMessage; j++){
                putc(msg[j], stderr);
              }
              putc('\n', stderr);
            }
            strcpy(names[i], msg);
          }else{
            close(que[i]);
            que[i] = 0;
            players--;
          }
        }
      }
    }
  }
  if(remove(".//TTThost.txt")!=0){
    fprintf(stderr, "Removing host file failed\n");
  }
  if(debugT){
    fprintf(stderr, "Exiting TTT\n");
  }    
  exit(0);
}

